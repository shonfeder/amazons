* Notes
  I initially started this in OCsigen and Eliom, but found it all just too
  cumbersome and mysterious. So I've scratched that.
* Tasks
** TODO Makefile to build front and back ends
   - Execute bucklscript build :: =npm run build=
   - Execute jbuilder build :: =jbduiler build=
* Tutorial
  Notes for a tutorial on getting started with Ocsigen
** Getting Tuareg and Merlin working correctly

   Tooling-wise, the OCaml ecosystem is currently in an awkward state. The
   tooling available is relatively powerful, feature rich, compact, and
   coherent, but the setup can be finicky and requires a lot of manual
   maintenance. These are some tips for coaxing the tooling to behave well on
   Eliom projects.

   Assuming you are using ~eliom-distillery~ to get started with a template,
   you'll need to add the following to your ~.merlin~ file to get all the merlin
   goodness:

   #+BEGIN_SRC merlin
   PKG eliom
   PKG eliom.client
   PKG eliom.ppx

   PKG ocsigenserver
   PKG ocsigen-toolkit

   PKG ppx_deriving
   PKG eliom.ppx.server
   PKG eliom.ppx.client

   S _client
   S _server

   B _client
   B _server
   #+END_SRC

*** Gotchas and quirks?

    Merlin was not linting my project correctly due to inconsistencies it was
    detecting. I suspect this was due to some nuance in Eliom's client/server
    scheme uses which was being muddled by the way I was declaring packages to
    merlin in my config file.

    The symptom was merlin throwing error messages like the following at the top
    of my files:

    #+BEGIN_SRC
    The files /Users/sf/.opam/4.04.2/lib/eliom/client/eliom_client_core.cmi
           and /Users/sf/.opam/4.04.2/lib/eliom/server/eliom_lib.cmi
           make inconsistent assumptions over interface Eliom_lib
    #+END_SRC

    I was initially declaring both ~eliom.client~ and ~eliom.server~ packages in
    my ~.merlin~. The solution turned out to be removing the ~elimo.server~
    package from my ~.merlin~ file. This seemed to provide everything I needed
    to lint my files, without generating the inconsistency error.

** How to add package dependencies
   - Add these to your ~.merlin~
   - Add them to the ~SERVER_PACKAGES~ and ~CLIENT_PACKAGES~ variables in the
     ~Makefile.options~ as needed.
     - *Note*: The order of these files matters? :( You have to list them
       so that modules come after the modules they depend on.
** How to add ~*.ml~ modules
   - Add these to your ~.merlin~
   - Add them to the ~SERVER_FILES~ and ~CLIENT_FILES~ variables in the
     ~Makefile.options~ as needed.
** Simple intro to reactive client-server programming
   - This tutorial has too much other stuff going on :: https://ocsigen.org/tuto/6.1/manual/tutoreact
   - This section of manual only covers client side :: https://ocsigen.org/eliom/5.0/manual/clientserver-html#reactive
   - This one has too little going on :: https://ocsigen.org/eliom/5.0/manual/clientserver-react
*** TODO Make a simple tic-tac-toe app following tutorial
    Creating this in a separate repo: [[https://github.com/shonfeder/reactive_tic_tack_toe][reactive_tick_tack_toe]]
*** TODO document and publish tutorial on the process

* Trials and Tribulations
** Resolving chicken and egg service problems with mutual recursion
*** TODO Document how I was able to work around the menu/services problem
    Using mutually recursive thunks. See [[file:amazons.eliom::119][here.]]
** Missing Primitives
   Ongoing problem with pending issue: https://github.com/issues
*** This causes Problems with client-side injection
    See https://github.com/ocsigen/eliom/issues/506 and, especially,
    https://github.com/ocsigen/eliom/issues/100#issuecomment-44929242
**** DONE Make a fresh isolated study of client-side code
     CLOSED: [2017-10-01 Sun 22:55]
     Play with this to see exactly what is going on and figure out how to break it.
     See
*** DONE Explain what causes this and how to solve it
    CLOSED: [2017-10-03 Tue 23:37]
**** Caused by depending on external packages
     In this case, batteries. By what specifically is going on?
**** The fix
     Add the necessary native packages as options to ~js_of_ocaml~ passing
     them through ~js_of_eliom~ by changing the ~JS_OF_ELIOM~ variable in the
     ~Makefile.options~ like so:

     #+BEGIN_SRC makefile
     JS_OF_ELIOM       := js_of_eliom -jsopt +nat.js -ppx
     #+END_SRC
* Gripes
  Things that are frustrating and painful about working with ocsigen.
** Out of date and incorrect documentation
   This has been a pretty constant source of difficulty for me.
** Baroque type signatures
   Many things you would expect to be very simple and straight forward (judging
   from other frameworks) are fiendishly difficult with OCsigen. Creating
   external links is a simple example of this.

   There are, however, two points to note on this front:
   1. Ocsigen's complexity is really just exposing the complexity that other
      frameworks hide, but it is also exposing power they don't offer.
   2. There are special features and abilities enabled by this complexity:
      statically verified HTML and linking, etc...?
